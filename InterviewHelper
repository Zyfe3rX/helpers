/////////////////////////////////////////////////////////////////////////  Find 2nd largest element in array
func secondLargest()
    {
       let arr = [1,6,3,890,123,6324,61,2]
        var largest = arr[0]
        var large2 = 0
        for i in(0..<arr.count)
        {
            let newVal = arr[i]
            if newVal > largest
            {
                large2 = largest
                largest = newVal
            }
        }
        
        print("largest = \(largest)")
        print("2nd largest = \(large2)") 
        
        OR
        
        let sortedArr = arr.sorted()
        let sortArrCount = sortedArr.count
        let largest2nd = sortedArr[sortArrCount-2]
        print(largest2nd)
    }
    
  /////////////////////////////////////////////////////////////////////////  Find all numbers between WITHOUT and WITH USING CONTAIN()
        func numbersbetween()
    {
        var arr = [9,16,1,5,7,3]
        arr.sort()
        var n = 0
        var finalArr = [Int]()
        let maxVal = arr.max() ?? 0
        for var i in(0..<maxVal)
        {
            if arr.contains(n)
            {
                n += 1
            }
            else
            {
            //    finalArr.append(n)
                n += 1
            }
        }
        print(finalArr)
        var checker = false
        n = 0
        for  i in(0..<maxVal)
        {
            for k in (0..<arr.count)
            {
                let x = arr[k]
                
                if n == x
                {
                    checker = true
                    break
                }
                else
                {
                    checker = false
                }
            }
            if checker == false
            {
                finalArr.append(n)
            }
            n += 1
        }
        print(finalArr)
    }
    
    
    
    /////////////////////////////////////////////////////////////////////////  Tuple Sorting
    
        var personx = ( n : "2" ,l : "2")
        var person1 = (n : "1" ,l : "1")
        var parray = [personx,person1]
        print(parray)
        
        parray.sort { (parray1 : (n : String, l : String), parray2 : (n : String, l : String)) -> Bool in
            return parray1  < parray2
        }
        print(parray)
    
      /////////////////////////////////////////////////////////////////////////  String Reversal
    
        let myString = "My Name is something something"
        let myString2 = String (myString.reversed())
        OR
        var myString3 = ""
        for i in(0..<myString4.count)
        {
        let x = myString[myString4.index(myString.startIndex, offsetBy: i)]
            myString5.append(x)
         
        }
        
      /////////////////////////////////////////////////////////////////////////  Array sorting without .sort()       
        
        
        var arr = [7,6456,2135,164,1345,4,8,5,87456,123,2,87,724,6523,1]
        var arrSorted = arr
        var index = arr.count
        repeat {
          var previousSwapIndex = 0
          
          for i in 1..<index {
            if (arrSorted[i - 1] as! Int) > (arrSorted[i] as! Int) {
               
                let x = arrSorted[i - 1]
                let y = arrSorted[i]
                arrSorted[i] = x
                arrSorted[i - 1] = y
              previousSwapIndex = i
            }
          }

          index = previousSwapIndex
          
        } while (index != 0)
        print(arrSorted as Array)
    
    

/////////////////////////////////////////////////////////////////////////  SingleTon Class
class NetworkManager {
    static let shared = NetworkManager(baseURL: API.baseURL)
    let baseURL: URL
    private init(baseURL: URL) {
        self.baseURL = baseURL
    }

}

////////////////////////////////////////////////////////////////////// Swift Data structures & Algorithms
https://github.com/raywenderlich/swift-algorithm-club


////////////////////////////////////////////////////////////////////// Creation of Linked Lists

public class Node<T> {
  var value: T
  var next: Node?
  weak var previous: Node?

  public init(value: T) {
    self.value = value
  }
}

public class LinkedList<T> {

  private var head: Node?

  public var isEmpty: Bool {
    return head == nil
  }

  public var first: Node? {
    return head
  }
}

public var last: Node? {
    guard var node = head else {
      return nil
    }
  
    while let next = node.next {
      node = next
    }
    return node
  }
  
  public func append(value: T) {
    let newNode = Node(value: value)
    if let lastNode = last {
      newNode.previous = lastNode
      lastNode.next = newNode
    } else {
      head = newNode
    }
    public var count: Int {
    guard var node = head else {
      return 0
    }
  
    var count = 1
    while let next = node.next {
      node = next
      count += 1
    }
    return count
  }
  public var print: String {
   var s = "["
   var node = head
   while node != nil {
       s += "\(node!.value)"
       node = node!.next
       if node != nil { s += ", " }
   }
   return s + "]"
}
public func node(atIndex index: Int) -> Node {
    if index == 0 {
        return head!
    } else {
        var node = head!.next
        for _ in 1..<index {
            node = node?.next
            if node == nil { //(*1)
                break
            }
        }
        return node!
    }
}
public func insert(value: T, atIndex index: Int) {
   let newNode = Node(value: value)
   if index == 0 {
       newNode.next = head
       head?.previous = newNode
       head = newNode
   } else {
       let previousNode = self.node(atIndex: index-1)
       let nextNode = previousNode.next

       newNode.previous = previousNode
       newNode.nextNode = previousNode.next
       previousNode.next = newNode
       nextNode?.previous = newNode
   }
}
public func remove(node: Node) -> T {
    let previousNode = node.previous
    let nextNode = node.next

    if let previousNode = previousNode {
        previousNode.next = nextNode
    } else {
        head = nextNode
    }
    nextNode?.previous = previousNode

    node.previous = nil
    node.next = nil
    return node.value
}
public func removeAt(_ index: Int) -> T {
    let nodeToRemove = node(atIndex: index)
    return remove(node: nodeToRemove)
}
  }


////////////////////////////////////////////////////////////////////// DATABASES

https://www.elitechsystems.com/which-database-you-should-choose-for-ios-application-development/
